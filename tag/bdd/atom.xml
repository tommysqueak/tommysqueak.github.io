<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[bdd | Tom Philip - Full Stack, Rails, .NET, Android and Boxee Developer]]></title>
  <link href="http://tomphilip.me/tag/bdd/atom.xml" rel="self"/>
  <link href="http://tomphilip.me/"/>
  <updated>2013-12-08T20:10:54+01:00</updated>
  <id>http://tomphilip.me/</id>
  <author>
    <name><![CDATA[Tom Philip]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dependency Inversion Principle]]></title>
    <link href="http://tomphilip.me/dependency-inversion-principle/"/>
    <updated>2012-08-16T00:00:00+02:00</updated>
    <id>http://tomphilip.me/dependency-inversion-principle</id>
    <content type="html"><![CDATA[<p>Slides and <a href="https://github.com/tommysqueak/dependency-inversion-talk">code</a> from a talk I gave on the Dependency Inversion Principle. Covers Dependency Injection, Service Location, TDD &amp; Mocking (how they play together nicely), Auto-mocking, IOC tools and a little best practice.</p>




<p>The code used in the talk is available at <a title="Dependency Inversion Principle - Code Examples" href="https://github.com/tommysqueak/dependency-inversion-talk">https://github.com/tommysqueak/dependency-inversion-talk</a></p>




<iframe src="http://www.slideshare.net/slideshow/embed_code/13992360" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" width="100%" height="400"></iframe>




<p>More <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/tommysqueak">Tom Philip</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Great Software Design Slides]]></title>
    <link href="http://tomphilip.me/great-software-design-slides/"/>
    <updated>2012-07-19T00:00:00+02:00</updated>
    <id>http://tomphilip.me/great-software-design-slides</id>
    <content type="html"><![CDATA[<p>Another talk I gave today about not just good software design but Great Software Design.  Takes in SOLID, Design Patterns, Anti-Patterns and Tips.</p>




<iframe src="http://www.slideshare.net/slideshow/embed_code/13694138" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" width="100%" height="400"></iframe>




<p>More <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/tommysqueak">Tom Philip</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sociable Software Delivery - An Introduction to BDD]]></title>
    <link href="http://tomphilip.me/sociable-software-delivery-an-introduction-to-bdd/"/>
    <updated>2012-07-10T00:00:00+02:00</updated>
    <id>http://tomphilip.me/sociable-software-delivery-an-introduction-to-bdd</id>
    <content type="html"><![CDATA[<p>
  Here's the slides from a talk I gave to staff at my current client <a href="http://www.newmind.co.uk/">New Mind</a>. 
  It's an introduction to Behaviour Driven Development, from idea to working software.
</p>




<iframe src="http://www.slideshare.net/slideshow/embed_code/13594151" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" width="100%" height="400"></iframe>




<p>More presentations from <a href="http://www.slideshare.net/tommysqueak" target="_blank">Tom Philip</a></p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Backbone with Jasmine and Sinon]]></title>
    <link href="http://tomphilip.me/testing-backbone-with-jasmine-and-sinon/"/>
    <updated>2011-12-23T00:00:00+01:00</updated>
    <id>http://tomphilip.me/testing-backbone-with-jasmine-and-sinon</id>
    <content type="html"><![CDATA[<p><img class="post__image" src="http://tomphilip.me/images/uploads/2011/12/Backbone_Jasmine_Sinon.png" alt="Backbone and Jasmine and Sinon"></p>




<p>This is based on an <strong><a href="http://xkcd.com">XKCD</a> leanback web app</strong> I'm working on that will form part of a html5 <a title="Boxee app developer" href="http://www.greatboxee.com">Boxee app</a>. Think sitting on your couch, remote control in hand flicking through XKCD comics on the TV.</p>




<p>It brings together quite a few technologies and techniques. The end results is something that is separated out nicely (no spaghetti code) that is simple, testable, documented and maintainable.</p>




<h2>The Specs</h2>


<p>``` javascript
describe(&ldquo;Comic Navigator&rdquo;, function(){</p>

<p> var nav = new Xkcd.ComicNavigator();
 var latestComic = new Xkcd.Comic({id: 101});</p>

<p> describe(&ldquo;when navigating to the latest xkcd comic&rdquo;, function(){</p>

<p>  beforeEach(function(){
   this.fetchStub = sinon.stub(Xkcd.Comic.prototype, &lsquo;fetch&rsquo;).yieldsTo(&lsquo;success&rsquo;, latestComic);
   nav.toLatest();
  });</p>

<p>  afterEach(function(){
   this.fetchStub.restore();
  });</p>

<p>  it(&ldquo;should fetch the latest comic. NB requests without a comic number get the latest comic.&rdquo;, function(){
   expect(this.fetchStub.thisValues[0].get(&ldquo;id&rdquo;)).toBeFalsy();
  });</p>

<p>  it(&ldquo;should navigate to the latest comic&rdquo;, function(){
   expect(nav.get(&ldquo;current&rdquo;)).toBe(latestComic);
  });</p>

<p>  it(&ldquo;should keep track of what the latest comic is&rdquo;, function(){
   expect(nav.get(&ldquo;latest&rdquo;)).toBe(latestComic);
  });</p>

<p> });
});
```</p>

<h3>So what's going on?</h3>




<p><strong><a title="Jasmine BDD Framework for Javascript" href="http://pivotal.github.com/jasmine/">Jasmine</a> is the BDD framework</strong> that is giving us that familiar 'describe/it' way of defining the behaviour and at the code level the expect-ations. It's easy to understand and get started with. It doesn't have to be run in the browser as it has no dependency on the DOM, so is CI friendly too.</p>




<p><strong><a title="Mocking, stubbing, spying framework for Javascript" href="http://sinonjs.org/">Sinon.JS</a> is the mocking framework</strong>. It's only being used here to stub out the fetch call, which would otherwise make a call to the server. It  also keeps the call synchronous and gives us a canned answer that we can later observe. It's framework independent, so can be used with your favourite Javascript testing framework.</p>




<h2>The Feature</h2>


<p>``` javascript
var Xkcd = (function(){</p>

<p> var ComicNavigator = Backbone.Model.extend({</p>

<p>  toLatest: function(){
   var comic = new Comic()
   var nav = this;
   comic.fetch({</p>

<pre><code>success: function(model){
 nav.set({"current": model});
 nav.set({"latest": model});
}
</code></pre>

<p>   });
  }
 });</p>

<p> var Comic = Backbone.Model.extend({
  url: function(){
   return &lsquo;<a href="http://dynamic.xkcd.com/api-0/jsonp/comic/">http://dynamic.xkcd.com/api-0/jsonp/comic/</a>&rsquo; + (this.id || &ldquo;&rdquo;) + &lsquo;?callback=?&rsquo;
  },</p>

<p>  initialize: function(){
   this.backbone_fetch = this.fetch;
   this.fetch = function(options){</p>

<pre><code>options || (options = {});
options.jsonpCallback = 'comicIncoming';
return this.backbone_fetch(options);
</code></pre>

<p>   }
  }
 });</p>

<p> return {
  ComicNavigator: ComicNavigator,
  Comic: Comic
 };</p>

<p>})();
```</p>

<h3>So what's going on?</h3>


<p>First of all, I'm using the <strong><a href="http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript">Revealing Module Pattern</a> to namespace the models</strong> into 'Xkcd'. The return statement at the end is effectively publicly exposing the ComicNavigator and Comic. Anything I want to keep private I can, I just don't expose it. This particular version of the <a href="http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript">Module Pattern</a> is quite neat as it clearly shows what's public and you can use consistent function definitions regardless of whether the function is public or private.</p>




<p><strong><a title="Backbone" href="http://documentcloud.github.com/backbone/">Backbone.js</a> is a lightweight MVC-like framework</strong> that allows you to structure your code, specifically separating your data from its presentation. I'm doing it an injustice, it actually does a lot more and is very useful in keeping everything in sync with a RESTful backend, not to mention routing, eventing and validation.`</p>




<p>In the above example I have 2 models. The rest of the code uses <a title="Backbone Router" href="http://documentcloud.github.com/backbone/#Router">routes</a> for bookmarking specific comics and possibly navigation to (I've yet to decide on that). There's also a <a title="Backbone View" href="http://documentcloud.github.com/backbone/#View">view</a> which will bind to the current comic on the navigator. As the navigator changes the current comic the UI will automatically reflect this. You'll be able to see all this in the finished app (coming soon!).</p>




<p>For the Comic model, Backbone has a <a title="Backbone Model fetch method" href="http://documentcloud.github.com/backbone/#Model-fetch">fetch</a> method that will automatically populate the model, given a url. I'm overriding the url property in order to add a <a href="http://en.wikipedia.org/wiki/JSONP">jsonp</a> callback (the XKCD service is on a different domain to the app). <strong>Just by adding "?callback=?" means backbone will switch to jsonp</strong>. Backbone just defers to jQuery's $.ajax (or <a title="Zepto.JS" href="http://zeptojs.com/">Zeptos</a>) method, which automatically detects the  presence of =? and switches from json to jsonp. If there's no comic id the service returns the latest comic. I'm also intercepting the fetch function to specify 'comicIncoming' as the callback, normally this isn't necessary but the XKCD service doesn't like jQuerys automatically generated callback.</p>




<p>At this stage, I'm not certain that the Navigator should be a Backbone model. It makes sense in a typical MVC app and has some characteristics of a Backbone model but then doesn't have the persistence/entity behaviours.</p>




<p>I'm also not happy with the 1st spec, I think it's highlighting a smell around newing up a comic. My static mind says inject a factory but that doesn't feel right in a dynamic language. Thoughts?</p>




<p>What I've shown is a small slice of the app, to show off some of the techniques and tools. Clearly there's more, I just haven't written it yet. Once the app is complete, it will show how the other parts come into play, specifically the routes and the view.</p>




<h2>To Recap</h2>


<ul>
    <li><a href="http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript">Module Pattern</a> for namespacing and keeping things private</li>
    <li><a href="http://pivotal.github.com/jasmine/">Jasmine</a> for BDD style testing ala RSpec</li>
    <li><a href="http://sinonjs.org/">Sinon</a> for test doubles (mocks, stubs etc if you care about the terms which cause more confusion than their worth)</li>
    <li><a href="http://documentcloud.github.com/backbone/">Backbone</a> for separating code into different concerns</li>
    <li><a href="http://en.wikipedia.org/wiki/JSONP">Jsonp</a> with Backbone to fetch data from a different domain</li>
</ul>




<p><strong>Update:</strong> The finished <a title="Introducing XKCD Couch" href="http://tomphilip.me/introducing-xkcd-couch/">xckd couch app</a>, the <a href="http://www.greatboxee.com/index.php/2012/01/30/xkcd-app-reborn/">html5 boxee app</a> and the <a title="Backbone on the Couch" href="http://tomphilip.me/backbone-on-the-couch/">backbone on the couch plugin</a> that came out of all of it.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BDD Talk]]></title>
    <link href="http://tomphilip.me/bdd-talk/"/>
    <updated>2010-11-25T00:00:00+01:00</updated>
    <id>http://tomphilip.me/bdd-talk</id>
    <content type="html"><![CDATA[<p>
  <iframe src="http://prezi.com/embed/4bklhiavc5qp/?bgcolor=ffffff&amp;lock_to_path=0&amp;autoplay=0&amp;autohide_ctrls=0&amp;features=undefined&amp;disabled_features=undefined" width="100%" height="400" frameBorder="0"></iframe>
</p>




<p>
  Gave a talk about <strong>BDD </strong>to the guys at work, about how we use it and could do more of it.
  <strong>Not Business Driven Development</strong>, as I'd got into my head and kept referring to it as.
  It was a bit embarrassing when, towards the end, somebody said that they'd heard about something like this called <strong>Behaviour Driven Development</strong>.
</p>




<p class="prezi-player-links">
  <a href="http://prezi.com/4bklhiavc5qp/bdd/">BDD</a> on <a href="http://prezi.com">Prezi</a>
</p>

]]></content>
  </entry>
  
</feed>
