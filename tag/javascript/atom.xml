<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[javascript | Tom Philip - Full Stack, Rails, .NET, Android and Boxee Developer]]></title>
  <link href="http://tommysqueak.github.io/tag/javascript/atom.xml" rel="self"/>
  <link href="http://tommysqueak.github.io/"/>
  <updated>2013-12-06T00:20:10+01:00</updated>
  <id>http://tommysqueak.github.io/</id>
  <author>
    <name><![CDATA[Tom Philip]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cassette. The Javascript CSS Minifying Combining Compressing Tool for ASP.NET]]></title>
    <link href="http://tommysqueak.github.io/cassette-the-javascript-css-minifying-combining-compressing-tool-for-asp-net/"/>
    <updated>2012-02-02T00:00:00+01:00</updated>
    <id>http://tommysqueak.github.io/cassette-the-javascript-css-minifying-combining-compressing-tool-for-asp-net</id>
    <content type="html"><![CDATA[<p><img class="post__image" src="http://tommysqueak.github.io/images/uploads/2012/02/cassette.jpg" alt="Cassette Tape"></p>




<p><strong>In a nutshell, <a href="http://getcassette.net/">Cassette</a> will minify, combine, compress and cache your css and javascript files, reducing your page load times.</strong> It does a <a title="more benefits of Cassette" href="http://getcassette.net/benefits">heap more</a> too like <a href="http://lesscss.org/">LESS</a>, <a href="http://coffeescript.org/">Coffeescript</a>, file ordering, debug vs release files, html templates, CDN assets and more.</p>




<p>It's easy to <a title="getting started with Cassette" href="http://getcassette.net/documentation/getting-started">get started</a> with too. No more complicated than referencing your css and javascript files directly.</p>




<h2>No Excuses</h2>


<p>I hadn't implemented any minifying, combining, etc for my app <a title="Create, Discover and Share Packing Lists" href="http://pikpak.me">Pik Pak</a>. As I saw it (with my lean goggles on), it worked fine, it was good enough. I could benefit from it but really was the effort worth it. I'd bookmarked Cassette ages ago when it was Knapsack and made it a someday-maybe task. As I was giving Pik Pak a facelift, removing a garish design and replacing with the wonderful <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a>, it was time to bring it in.</p>




<p>My opinion has changed, it is worth it. It takes so little effort. I know in my next asp.net project it will go in at the beginning, it's so easy to use there's no excuse not too (Except perhaps 1, if you're not using .NET 4.0). In dev I get the scripts unaltered, just like I'd inserted them manually and in prod they get minified, compressed and combined.</p>




<h2>How it Works (Briefly)</h2>


<p>I want to share with you a little bit about how it works, as it wasn't clear to me at first. I originally mistook the <a href="http://getcassette.net/documentation/getting-started">Bundle.Reference() calls</a> to be informing Cassette about the asset and saying it's required on this page. There's actually 3 parts to Cassette, in it's simplest form (there's tons more to it):</p>




<p>There are 3 parts to getting your scripts/css combined, minified etc</p>




<h3>1. Tell Cassette about your css/js files</h3>


<p>Cassette doesn't automatically discover your files (assets), you need to tell it where they are and how they should be combined (bundles). A <a href="http://getcassette.net/documentation/getting-started/assets-and-bundles">bundle</a> is a number of files that will be combined into one minified/compressed file (in production) that is referenced by one script/stylesheet tag, thus causing a single download. The default CasseteConfiguration.css that get's dropped in by nuget creates a bundle for every css or javascript file. Which is better than nothing. You're getting minification, compression, caching, versioning but it's still a download per file, there's no combining. So you want to define bundles to minimise the number of downloads the browser has to make.</p>




<p>As well as defining what goes into a bundle you can also define the order within bundle and dependencies between bundles or files. Eg your script might depend on a framework like jQuery or Backbone.</p>




<p>There's a number of ways to define what goes into a bundle.</p>




<ul>
    <li>A bundle per file (default config). <code>bundles.AddPerIndividualFile&lt;StylesheetBundle&gt;("Content/Stylesheets");</code></li>
    <li><a href="http://getcassette.net/documentation/configuration/add-directory">A folder as a bundle</a>. <code>bundles.Add&lt;StylesheetBundle&gt;("Content/Stylesheets");</code></li>
    <li> A <a href="http://getcassette.net/documentation/configuration/add-per-sub-directory">folder as a bundle and each direct subfolder as a bundle</a> to. <code>bundles.AddPerSubDirectory&lt;<code>ScriptBundle</code>&gt;("Scripts");</code></li>
</ul>




<p>All of these kind be fine tuned to.</p>




<p>Defining the order they get rendered and dependencies (If your script depends on jquery and you reference your file or bundle in a page, jquery will automatically be pulled in) can be:</p>




<ul>
    <li><a href="http://getcassette.net/documentation/AssetReferences">Embedded in the file itself</a>. <code>// @reference ~/lib/backbone.js</code> <strong>or</strong> <code>/// &lt;reference path="~/lib/backbone.js" /&gt;</code></li>
    <li>or in <a href="http://getcassette.net/documentation/configuration/bundle-descriptor-file">bundle.txt files</a> in the folders that are being bundled.</li>
</ul>




<p>If you're still with me! Defining the bundles is the most difficult part but once you're done the next 2 are straight forward.</p>




<h3>2. Request scripts to be added to the page</h3>


<p>This is were <a href="http://getcassette.net/documentation/getting-started/assets-and-bundles">inform Casssette, that you need xyx file on this page</a>. This can be in your master page/Razor layout, page or partial view. You can either</p>




<ul>
    <li>reference the file itself (and the containing bundle will be inserted) <code>@Bundles.Reference("lib/backbone/backbone.marionette.js");</code></li>
    <li>or you can reference the bundle <code>@Bundles.Reference("lib/backbone")</code></li>
</ul>




<p>You can also optionally specify where the script should be rendered. <code>@Bundles.Reference("lib/modernizr.js", "header")</code></p>




<h3>3. Render the scripts</h3>


<p>Call into Cassette to render the script/css tags at that point. Normally this will be one or 2 lines in your layout/masterpage file.</p>


<p>``` aspx-cs
&lt;!DOCTYPE html>
<html>
<head></p>

<pre><code>&lt;title&gt;Web App&lt;/title&gt;
@Bundles.RenderStylesheets()
</code></pre>

<p></head>
<body></p>

<pre><code>...
@Bundles.RenderScripts()
</code></pre>

<p></body>
</html>
```</p>

<p>There's so much more, all in the <a href="http://getcassette.net/documentation/">documentation</a>.</p>




<h2>Tips</h2>


<p>So far, these are my thoughts on how to get the best out of Cassette with least effort.</p>




<h3>Render scripts before closing body tags</h3>


<p>Everyone knows you should render your scripts before the closing body tags, to prevent the page load being blocked. Have your main <code>@Bundles.RenderScripts();</code> before the closing body tags and have a specific one <code>@Bundles.RenderScripts("header")</code> in the header for those scripts that need it (<a href="http://www.modernizr.com/">Modernizr</a>).</p>




<h3>jQuery CDN</h3>


<p>If your using jquery, you should create a bundle just for itself. Create a folder (probably called jquery), add the jquery file and a bundle.txt file containing the following:</p>


<p>```
[external]
url = //ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
fallbackCondition = !window.jQuery</p>

<p>[assets]
jquery.js</pre>
```</p>

<p>Then reference the bundle as normal <code>@Bundles.Reference("scripts/jquery");</code> In dev you get your full jquery js file and in prod you get googles cdn jquery file (most likely already cached in the broswer) with a fallback to your minified/compressed one.</p>




<h3>Convention</h3>


<p>Use <code>bundles.AddPerSubDirectory&lt;ScriptBundle&gt;("Scripts");</code> and arrange your scripts/css into folders for each bundle you want. That way you don't have to go back and touch the CasetteConfiguration. You can leave it upto convention and fine tune with a bundle.txt file in the folders/bundles where needed.</p>




<p>It'd be great to hear how your using Cassette, in the comments and any tips that have helped.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing XKCD Couch]]></title>
    <link href="http://tommysqueak.github.io/introducing-xkcd-couch/"/>
    <updated>2012-01-30T00:00:00+01:00</updated>
    <id>http://tommysqueak.github.io/introducing-xkcd-couch</id>
    <content type="html"><![CDATA[<p><img class="post__image" src="http://tommysqueak.github.io/images/uploads/2012/01/xkcd-couch.png" alt="xkcd couch"></p>




<p>An app for lounging on your couch, with your remote control, flicking through <a title="XKCD Comics" href="http://xkcd.com">XCKD</a> comics on your TV.</p>




<p><strong>Available now, for use right in your browser at <a title="XKCD Couch" href="http://xkcd.greatboxee.com">http://xkcd.greatboxee.com</a></strong></p>




<p><strong>Designed for the big screen and a remote.</strong> Use you left and right arrow keys on your remote/keyboard to navigate through the comics. Use the select/enter/space type key reveal the good old 'alt' text.</p>




<h2>Technology</h2>


<p>A bit about the technology behind it. It'a single page HTML5 app that uses <a href="http://documentcloud.github.com/backbone/">Backbone.js</a> as it's underlying framework, that was tested with the BDD framework <a title="Jasmine - BDD for Javascript" href="http://pivotal.github.com/jasmine/">Jasmine</a> and mocking library <a title="Standalone test spies, stubs and mocks for JavaScript." href="http://sinonjs.org/">Sinon.js</a>. Early parts of this app appeared in my previous post on <a title="Testing Backbone with Jasmine and Sinon" href="http://tommysqueak.github.io/testing-backbone-with-jasmine-and-sinon/">Testing Backbone.js with Jasmine and Sinon.js</a>. It also spawned a Backbone plugin called <a title="Backbone on the Couch" href="http://tommysqueak.github.io/backbone-on-the-couch/">Backbone on the Couch</a>, which allows you to easily bind to remote control d-pad events (left, right, up, down etc).</p>




<p>Works on modern browers and maybe even some of the older ones. It's also part of a <a href="http://www.greatboxee.com/index.php/2012/01/30/xkcd-app-reborn/">html5 app for Boxee</a>.</p>




<p>Enjoy :) and I welcome your feedback.</p>




<p><strong><a title="XKCD Couch" href="http://xkcd.greatboxee.com">http://xkcd.greatboxee.com</a></strong></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone on the Couch]]></title>
    <link href="http://tommysqueak.github.io/backbone-on-the-couch/"/>
    <updated>2012-01-30T00:00:00+01:00</updated>
    <id>http://tommysqueak.github.io/backbone-on-the-couch</id>
    <content type="html"><![CDATA[<p><img class="post__image" src="http://tommysqueak.github.io/images/uploads/2012/01/Backbone-on-the-Couch.png" alt="Backbone on the Couch"></p>




<p>A simple <a href="http://documentcloud.github.com/backbone">Backbone.js</a> plugin for use in leanback apps, where someone is sat on the couch using a remote control to use your app. It's open source. You can get it and fork it at <strong><a title="Backbone on the Couch source code" href="https://github.com/tommysqueak/Backbone-On-The-Couch">Backbone on the Couch on github</a></strong></p>




<p>Gives you something even your mum can understand.</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">keypad</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">key</span><span class="o">:</span><span class="nx">left</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nx">doSomething</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>vs</strong></p>




<p>What does the magic number 37 mean?</p>


<p><code>javascript
 switch(e.which)
 {
  case: 37
   doSomething();
   break;
  etc:
  etc:
  andsoon:
 }
</code></p>

<h2>Usages</h2>




<p>In its simplest form you can do the following:</p>


<p>``` javascript
var keypad = new Backbone.OnTheCouch.KeyEvents();</p>

<p>// listen for any of the commonly used d-pad keys (left, right, up, down, enter, space and escape)
keypad.bind(&ldquo;key:up&rdquo;, function(){//do something on up});
```</p>

<p>If you're using an event aggregator or something else. You can have the events trigger on that instead:</p>


<p>``` javascript
var eventAggregator = _.extend({}, Backbone.Events);
var keypad = new Backbone.OnTheCouch.KeyEvents({triggerOn: eventAggregator});</p>

<p>eventAggregator.bind(&ldquo;key:up&rdquo;, function(){//do something on up});
```</p>

<p>You can also replace the d-pad key defaults and provide your own keys that you want to listen for:</p>


<p>``` javascript
var keypad = new Backbone.OnTheCouch.KeyEvents({keyMaps: [
  new Backbone.OnTheCouch.KeyEvent(188, &ldquo;key:comma&rdquo;),
  new Backbone.OnTheCouch.KeyEvent(190, &ldquo;key:fullstop&rdquo;)
 ]
});</p>

<p>keypad.bind(&ldquo;key:comma&rdquo;, function(){//do something odd});
```</p>

<h2>Example</h2>


<p>The plugin came out of the development of the <a href="http://tommysqueak.github.io/introducing-xkcd-couch/">XKCD Couch app</a>, which is also a <a href="http://www.greatboxee.com/index.php/2012/01/30/xkcd-app-reborn/">html5 Boxee app</a>. You can see this plugin at work on <a href="http://xkcd.greatboxee.com">XKCD Couch app</a>.</p>




<p><strong><a title="Backbone on the Couch source code" href="https://github.com/tommysqueak/Backbone-On-The-Couch">Backbone on the Couch on github</a></strong></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Backbone with Jasmine and Sinon]]></title>
    <link href="http://tommysqueak.github.io/testing-backbone-with-jasmine-and-sinon/"/>
    <updated>2011-12-23T00:00:00+01:00</updated>
    <id>http://tommysqueak.github.io/testing-backbone-with-jasmine-and-sinon</id>
    <content type="html"><![CDATA[<p><img class="post__image" src="http://tommysqueak.github.io/images/uploads/2011/12/Backbone_Jasmine_Sinon.png" alt="Backbone and Jasmine and Sinon"></p>




<p>This is based on an <strong><a href="http://xkcd.com">XKCD</a> leanback web app</strong> I'm working on that will form part of a html5 <a title="Boxee app developer" href="http://www.greatboxee.com">Boxee app</a>. Think sitting on your couch, remote control in hand flicking through XKCD comics on the TV.</p>




<p>It brings together quite a few technologies and techniques. The end results is something that is separated out nicely (no spaghetti code) that is simple, testable, documented and maintainable.</p>




<h2>The Specs</h2>


<p>``` javascript
describe(&ldquo;Comic Navigator&rdquo;, function(){</p>

<p> var nav = new Xkcd.ComicNavigator();
 var latestComic = new Xkcd.Comic({id: 101});</p>

<p> describe(&ldquo;when navigating to the latest xkcd comic&rdquo;, function(){</p>

<p>  beforeEach(function(){
   this.fetchStub = sinon.stub(Xkcd.Comic.prototype, &lsquo;fetch&rsquo;).yieldsTo(&lsquo;success&rsquo;, latestComic);
   nav.toLatest();
  });</p>

<p>  afterEach(function(){
   this.fetchStub.restore();
  });</p>

<p>  it(&ldquo;should fetch the latest comic. NB requests without a comic number get the latest comic.&rdquo;, function(){
   expect(this.fetchStub.thisValues[0].get(&ldquo;id&rdquo;)).toBeFalsy();
  });</p>

<p>  it(&ldquo;should navigate to the latest comic&rdquo;, function(){
   expect(nav.get(&ldquo;current&rdquo;)).toBe(latestComic);
  });</p>

<p>  it(&ldquo;should keep track of what the latest comic is&rdquo;, function(){
   expect(nav.get(&ldquo;latest&rdquo;)).toBe(latestComic);
  });</p>

<p> });
});
```</p>

<h3>So what's going on?</h3>




<p><strong><a title="Jasmine BDD Framework for Javascript" href="http://pivotal.github.com/jasmine/">Jasmine</a> is the BDD framework</strong> that is giving us that familiar 'describe/it' way of defining the behaviour and at the code level the expect-ations. It's easy to understand and get started with. It doesn't have to be run in the browser as it has no dependency on the DOM, so is CI friendly too.</p>




<p><strong><a title="Mocking, stubbing, spying framework for Javascript" href="http://sinonjs.org/">Sinon.JS</a> is the mocking framework</strong>. It's only being used here to stub out the fetch call, which would otherwise make a call to the server. It  also keeps the call synchronous and gives us a canned answer that we can later observe. It's framework independent, so can be used with your favourite Javascript testing framework.</p>




<h2>The Feature</h2>


<p>``` javascript
var Xkcd = (function(){</p>

<p> var ComicNavigator = Backbone.Model.extend({</p>

<p>  toLatest: function(){
   var comic = new Comic()
   var nav = this;
   comic.fetch({</p>

<pre><code>success: function(model){
 nav.set({"current": model});
 nav.set({"latest": model});
}
</code></pre>

<p>   });
  }
 });</p>

<p> var Comic = Backbone.Model.extend({
  url: function(){
   return &lsquo;<a href="http://dynamic.xkcd.com/api-0/jsonp/comic/">http://dynamic.xkcd.com/api-0/jsonp/comic/</a>&rsquo; + (this.id || &ldquo;&rdquo;) + &lsquo;?callback=?&rsquo;
  },</p>

<p>  initialize: function(){
   this.backbone_fetch = this.fetch;
   this.fetch = function(options){</p>

<pre><code>options || (options = {});
options.jsonpCallback = 'comicIncoming';
return this.backbone_fetch(options);
</code></pre>

<p>   }
  }
 });</p>

<p> return {
  ComicNavigator: ComicNavigator,
  Comic: Comic
 };</p>

<p>})();
```</p>

<h3>So what's going on?</h3>


<p>First of all, I'm using the <strong><a href="http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript">Revealing Module Pattern</a> to namespace the models</strong> into 'Xkcd'. The return statement at the end is effectively publicly exposing the ComicNavigator and Comic. Anything I want to keep private I can, I just don't expose it. This particular version of the <a href="http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript">Module Pattern</a> is quite neat as it clearly shows what's public and you can use consistent function definitions regardless of whether the function is public or private.</p>




<p><strong><a title="Backbone" href="http://documentcloud.github.com/backbone/">Backbone.js</a> is a lightweight MVC-like framework</strong> that allows you to structure your code, specifically separating your data from its presentation. I'm doing it an injustice, it actually does a lot more and is very useful in keeping everything in sync with a RESTful backend, not to mention routing, eventing and validation.`</p>




<p>In the above example I have 2 models. The rest of the code uses <a title="Backbone Router" href="http://documentcloud.github.com/backbone/#Router">routes</a> for bookmarking specific comics and possibly navigation to (I've yet to decide on that). There's also a <a title="Backbone View" href="http://documentcloud.github.com/backbone/#View">view</a> which will bind to the current comic on the navigator. As the navigator changes the current comic the UI will automatically reflect this. You'll be able to see all this in the finished app (coming soon!).</p>




<p>For the Comic model, Backbone has a <a title="Backbone Model fetch method" href="http://documentcloud.github.com/backbone/#Model-fetch">fetch</a> method that will automatically populate the model, given a url. I'm overriding the url property in order to add a <a href="http://en.wikipedia.org/wiki/JSONP">jsonp</a> callback (the XKCD service is on a different domain to the app). <strong>Just by adding "?callback=?" means backbone will switch to jsonp</strong>. Backbone just defers to jQuery's $.ajax (or <a title="Zepto.JS" href="http://zeptojs.com/">Zeptos</a>) method, which automatically detects the  presence of =? and switches from json to jsonp. If there's no comic id the service returns the latest comic. I'm also intercepting the fetch function to specify 'comicIncoming' as the callback, normally this isn't necessary but the XKCD service doesn't like jQuerys automatically generated callback.</p>




<p>At this stage, I'm not certain that the Navigator should be a Backbone model. It makes sense in a typical MVC app and has some characteristics of a Backbone model but then doesn't have the persistence/entity behaviours.</p>




<p>I'm also not happy with the 1st spec, I think it's highlighting a smell around newing up a comic. My static mind says inject a factory but that doesn't feel right in a dynamic language. Thoughts?</p>




<p>What I've shown is a small slice of the app, to show off some of the techniques and tools. Clearly there's more, I just haven't written it yet. Once the app is complete, it will show how the other parts come into play, specifically the routes and the view.</p>




<h2>To Recap</h2>


<ul>
    <li><a href="http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript">Module Pattern</a> for namespacing and keeping things private</li>
    <li><a href="http://pivotal.github.com/jasmine/">Jasmine</a> for BDD style testing ala RSpec</li>
    <li><a href="http://sinonjs.org/">Sinon</a> for test doubles (mocks, stubs etc if you care about the terms which cause more confusion than their worth)</li>
    <li><a href="http://documentcloud.github.com/backbone/">Backbone</a> for separating code into different concerns</li>
    <li><a href="http://en.wikipedia.org/wiki/JSONP">Jsonp</a> with Backbone to fetch data from a different domain</li>
</ul>




<p><strong>Update:</strong> The finished <a title="Introducing XKCD Couch" href="http://tommysqueak.github.io/introducing-xkcd-couch/">xckd couch app</a>, the <a href="http://www.greatboxee.com/index.php/2012/01/30/xkcd-app-reborn/">html5 boxee app</a> and the <a title="Backbone on the Couch" href="http://tommysqueak.github.io/backbone-on-the-couch/">backbone on the couch plugin</a> that came out of all of it.</p>

]]></content>
  </entry>
  
</feed>
